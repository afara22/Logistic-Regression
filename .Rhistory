getwd()
install.packages("caret")
install.packages("tidymodels")
library(tidyverse)
library(caret)
library(tidymodels)
lifeInsurance_raw_data <- read_csv("insurance.csv")
view(lifeInsurance_raw_data)
lifeInsurance_data <- lifeInsurance_data %>%
mutate(smokerInt = as.integer(smoker == "yes"))
view(lifeInsurance_data)
lifeInsurance_data <- lifeInsurance_raw_data %>%
mutate(smokerInt = as.integer(smoker == "yes"))
view(lifeInsurance_data)
ggplot(lifeInsurance_data, aes(x = expenses, y = smokerInt)) +
geom_jitter(height = .05,
alpha = .1)
?initial_split
split <- initial_split(lifeInsurance_data, prop = .80, strata = "smokerInt")
#train and test the lifeInsurance_data
set.seed(2)
split <- initial_split(lifeInsurance_data, prop = .80, strata = "smokerInt")
insurance_train <- train(split)
insurance_train <- training(split)
insurance_test <- testing(split)
view(insurance_train)
?createDataPartition
getwd()
#load packages
library(tidyverse)
library(caret)
library(tidymodels)
?createDataPartition
?initial_split
?training
?training()
?predict
getwd()
setwd("C:/Users/18182/OneDrive/Desktop/R_Files)
scratchwork
ScratchWork.R
getwd()
setwd("C:/Users/18182/OneDrive/Desktop/R_Files")
getwd()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
labs(
x = "Engine displacement (L)",
y = "Highway fuel economy (mpg)",
color = "Car type",
title = "Fuel efficiency generally decreases with engine size",
subtitle = "Two seaters (sports cars) are an exception because of their light weight",
caption = "Data from fueleconomy.gov"
)
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(
x = "Engine displacement (L)",
y = "Highway fuel economy (mpg)",
color = "Car type",
title = "Fuel efficiency generally decreases with engine size",
subtitle = "Two seaters (sports cars) are an exception because of their light weight",
caption = "Data from fueleconomy.gov"
)
ggplot(mpg, aes(x = displ, y = hwy, colour = class)) +
geom_point() +
geom_smooth(se = FALSE) +
labs(
x = "Engine displacement (L)",
y = "Highway fuel economy (mpg)",
color = "Car type",
title = "Fuel efficiency generally decreases with engine size",
subtitle = "Two seaters (sports cars) are an exception because of their light weight",
caption = "Data from fueleconomy.gov"
)
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
labs(
x = "Engine displacement (L)",
y = "Highway fuel economy (mpg)",
color = "Car type",
title = "Fuel efficiency generally decreases with engine size",
subtitle = "Two seaters (sports cars) are an exception because of their light weight",
caption = "Data from fueleconomy.gov"
)
setwd(~/MyProjects/Project2)
setwd("~/MyProjects/Project2")
setwd("~/MyProjects/Project2")
setwd("C:/Users/18182/OneDrive/Desktop/R_Files/MyProjects/Project2")
getwd()
getwd()
view(insurance_test)
#load packages
library(tidyverse)
library(caret)
library(tidymodels)
view(insurance_test)
nrow(insurance_test) + nrow(insurance_train) == nrow(lifeInsurance_data)
#visualize data
ggplot(insurance_train, aes(x = expenses, y = smokerInt)) +
geom_jitter(height = .05, alpha = .1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE)
#visualize data
ggplot(insurance_train, aes(x = expenses,
y = smokerInt)) +
geom_jitter(height = .05,
alpha = .1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE) +
theme_dark()
#visualize data
ggplot(insurance_train, aes(x = expenses,
y = smokerInt)) +
geom_jitter(height = .05,
alpha = .1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE) +
theme_light()
#visualize data
ggplot(insurance_train, aes(x = expenses,
y = smokerInt)) +
geom_jitter(height = .05,
alpha = .1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE) +
theme_minimal()
#visualize data
ggplot(insurance_train, aes(x = expenses,
y = smokerInt)) +
geom_jitter(height = .05,
alpha = .1) +
geom_smooth(method = "glm",
method.args = list(family = "binomial"),
se = FALSE) +
theme_minimal()
#build that model
model <- glm(smokerInt ~ expenses,
data = training_data,
family = "binomial")
#build that model
model <- glm(smokerInt ~ expenses,
data = insurance_train,
family = "binomial")
summary(model)
#evaluate model on testing set
#first we'll add new columns to testing data
insurance_test <- insurance_test %>%
mutate(smoker_prop = predict(model,
insurance_test,
type = "response"),
smoker_pred = ifelse(smoker_prob > .5, "yes", "no")) #type makes sure it returns
view(insurance_test)
#evaluate model on testing set
#first we'll add new columns to testing data
insurance_test <- insurance_test %>%
mutate(smoker_prop = predict(model,
insurance_test,
type = "response"),
smoker_pred = ifelse(smoker_prob > .5, "yes", "no")) #type makes sure it returns
#evaluate model on testing set
#first we'll add new columns to testing data
insurance_test <- insurance_test %>%
mutate(smoker_prop = predict(model,
insurance_test,
type = "response"),
smoker_pred = ifelse(smoker_prob > .5, 1, 0)) #type makes sure it returns
#evaluate model on testing set
#first we'll add new columns to testing data
insurance_test <- insurance_test %>%
mutate(smoker_prop = predict(model,
insurance_test,
type = "response")) %>% #type makes sure it returns
mutate(smoker_pred = ifelse(smoker_prob > .5, 1, 0)))#p not logit(p)
#evaluate model on testing set
#first we'll add new columns to testing data
insurance_test <- insurance_test %>%
mutate(smoker_prop = predict(model,
insurance_test,
type = "response")) %>% #type makes sure it returns
mutate(smoker_pred = ifelse(smoker_prob > .5, 1, 0))#p not logit(p)
#evaluate model on testing set
#first we'll add new columns to testing data
insurance_test <- insurance_test %>%
mutate(smoker_prob = predict(model,
insurance_test,
type = "response"),     #type makes sure it returns
smoker_pred = ifelse(smoker_prob > .5, 1, 0)) #p not logit(p)
view(insurance_test)
table(insurance_test$smoker, insurance_test$smoker_pred)
t <- table(insurance_test$smoker,
insurance_test$smoker_pred)
t
sum(t)
207 + 6 + 21 + 34 == 268
sum(diag(t))
accuracy <- sum(diag(t))/sum(t)
accuracy
t
t["no", `0`]
t$no$0
t$no
t["no", 0]
t["no", 1]
names(t)
t[1,1]
TPR <- t[1, 1] / sum(t[1,])
TPR
207/213
FNR <- t[2,1] / sum(t[2,]) #negative rate given it's positive
TNR <- t[1,1] / sum(t[1,])
FPR <- t[1,2] / sum(t[1,]) #positive rate given it's negative
FPR + TNR
FNR + TPR
TPR <- t[2,2] / sum(t[2,]) #positive rate given it's positive
FNR <- t[2,1] / sum(t[2,]) #negative rate given it's positive
FNR + TPR
FPR + TNR
#display these results
results <- c(accuracy = accuracy, TPR = TPR, FNR = FNR, TNR = TNR, FPR = FPR)
View(results)
results
update.packages()
load("C:/Users/18182/OneDrive/Desktop/R_Files/MyProjects/insurance_claim_factors.R")
